<>
export const MemberModal = ({ isOpen, onClose, serverId, userId }) => {
  const { isOpen: isMemberSettingsOpen, onOpen: onMemberSettingsOpen, onClose: onMemberSettingsClose } = useDisclosure();
  const [admin, setAdmin] = useState(null);
  const [moderators, setModerators] = useState([]);
  const [members, setMembers] = useState([]);
  const [selectedUserId, setSelectedUserId] = useState(null);

  useEffect(() => {
    const fetchMembers = async () => {
      try {
        const serverRef = doc(db, 'servers', serverId);
        const serverDoc = await getDoc(serverRef);

        if (serverDoc.exists()) {
          const { members: { admin, member, moderator } } = serverDoc.data();

          const usersRef = collection(db, 'users');
          const adminDoc = admin ? await getDoc(doc(usersRef, admin)) : null;
          const adminData = adminDoc ? { ...adminDoc.data() } : null;

          const memberDocs = await Promise.all(member.map(uid => getDoc(doc(usersRef, uid))));
          const moderatorDocs = await Promise.all(moderator.map(uid => getDoc(doc(usersRef, uid))));

          const memberData = memberDocs.map(doc => ({ ...doc.data() }));
          const moderatorData = moderatorDocs.map(doc => ({ ...doc.data() }));

          setAdmin(adminData);
          setMembers(memberData);
          setModerators(moderatorData);
        }
      } catch (error) {
        console.error("Error fetching members:", error);
      }
    };

    if (isOpen) {
      fetchMembers();
    }
  }, [isOpen, serverId]);

  const memberSettings = async (userId) => {
    const user = auth.currentUser;
    try {
      const serverDoc = await getDoc(doc(db, 'servers', serverId));
      const admin = serverDoc.data()?.members.admin;
      if (admin === user.uid) {
        setSelectedUserId(userId);
        onMemberSettingsOpen();
      } else {
        setSelectedUserId(userId);
      }
    } catch (error) {
      console.log(error);
    }
  };

  const [isModerator, setIsModerator] = useState(false);
  const [loading, setLoading] = useState(false);
  const toast = useToast();

  useEffect(() => {
    if (isOpen && serverId && userId) {
      const fetchModeratorStatus = async () => {
        setLoading(true);
        try {
          const serverDoc = await getDoc(doc(db, 'servers', serverId));
          if (serverDoc.exists()) {
            const moderators = Array.isArray(serverDoc.data()?.members?.moderator)
              ? serverDoc.data().members.moderator
              : [];
            setIsModerator(moderators.includes(userId));
          }
        } catch (error) {
          toast({
            title: "Error fetching status.",
            description: "There was a problem fetching the moderator status.",
            status: "error",
            duration: 5000,
            isClosable: true,
          });
        } finally {
          setLoading(false);
        }
      };

      fetchModeratorStatus();
    }
  }, [isOpen, serverId, userId, toast]);

  const handlePromoteOrDemote = async () => {
    setLoading(true);
    try {
      if (serverId && selectedUserId) {
        const serverDocRef = doc(db, 'servers', serverId);
        const serverDoc = await getDoc(serverDocRef);
        if (serverDoc.exists()) {
          const data = serverDoc.data();
          const moderators = Array.isArray(data?.members?.moderator)
            ? data.members.moderator
            : [];
          const members = Array.isArray(data?.members?.member)
            ? data.members.member
            : [];

          let updatedModerators;
          let updatedMembers;

          if (isModerator) {
            updatedModerators = moderators.filter(id => id !== selectedUserId);
            updatedMembers = [...members, selectedUserId];
          } else {
            updatedMembers = members.filter(id => id !== selectedUserId);
            updatedModerators = [...moderators, selectedUserId];
          }

          await updateDoc(serverDocRef, {
            'members.moderator': updatedModerators,
            'members.member': updatedMembers,
          });

          toast({
            title: `User ${isModerator ? 'demoted' : 'promoted'}.`,
            description: `User ${isModerator ? 'demoted' : 'promoted'} successfully.`,
            status: "success",
            duration: 5000,
            isClosable: true,
          });

          setIsModerator(!isModerator);
        }
      }
    } catch (error) {
      toast({
        title: "Error updating status.",
        description: "There was a problem updating the user's status.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setLoading(false);
    }
  };

  const handleKick = async () => {
    setLoading(true);
    try {
      if (serverId && selectedUserId) {
        const serverDocRef = doc(db, 'servers', serverId);
        const serverDoc = await getDoc(serverDocRef);
        if (serverDoc.exists()) {
          const data = serverDoc.data();
          const moderators = Array.isArray(data?.members?.moderator)
            ? data.members.moderator
            : [];
          const members = Array.isArray(data?.members?.member)
            ? data.members.member
            : [];

          const updatedModerators = moderators.filter(id => id !== selectedUserId);
          const updatedMembers = members.filter(id => id !== selectedUserId);

          await updateDoc(serverDocRef, {
            'members.moderator': updatedModerators,
            'members.member': updatedMembers,
          });

          toast({
            title: "User kicked.",
            description: "User was kicked successfully.",
            status: "success",
            duration: 5000,
            isClosable: true,
          });

          onClose(); // Optionally close the modal after kicking
        }
      }
    } catch (error) {
      toast({
        title: "Error kicking user.",
        description: "There was a problem kicking the user.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Modal isOpen={isOpen} onClose={onClose}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>
            <Flex direction="column" align="center" gap={4}>
              Members
            </Flex>
          </ModalHeader>
          <ModalBody>
            <Flex direction="column" align="center" gap={4}>
              {admin && (
                <Menu>
                  <MenuButton
                    as={Button}
                    variant="ghost"
                    onClick={() => setSelectedUserId(admin.uid)}
                  >
                    {admin.name} <Tag ml={2}><FaCrown /></Tag>
                  </MenuButton>
                  <MenuList>
                    <MenuItem onClick={() => handlePromoteOrDemote()}>
                      {isModerator ? 'Demote' : 'Promote'}
                    </MenuItem>
                    <MenuItem onClick={handleKick}>Kick</MenuItem>
                  </MenuList>
                </Menu>
              )}
              {moderators.map((moderator, index) => (
                <Menu key={index}>
                  <MenuButton
                    as={Button}
                    variant="ghost"
                    onClick={() => setSelectedUserId(moderator.uid)}
                  >
                    {moderator.name} <Tag ml={2}><FaShieldAlt /></Tag>
                  </MenuButton>
                  <MenuList>
                    <MenuItem onClick={() => handlePromoteOrDemote()}>
                      {isModerator ? 'Demote' : 'Promote'}
                    </MenuItem>
                    <MenuItem onClick={handleKick}>Kick</MenuItem>
                  </MenuList>
                </Menu>
              ))}
              {members.map((member, index) => (
                <Menu key={index}>
                  <MenuButton
                    as={Button}
                    variant="ghost"
                    onClick={() => setSelectedUserId(member.uid)}
                  >
                    {member.name} <Tag ml={2}><FaUser /></Tag>
                  </MenuButton>
                  <MenuList>
                    <MenuItem onClick={() => handlePromoteOrDemote}>
                      {isModerator ? 'Demote' : 'Promote'}
                    </MenuItem>
                    <MenuItem onClick={handleKick}>Kick</MenuItem>
                  </MenuList>
                </Menu>
              ))}
            </Flex>
          </ModalBody>
        </ModalContent>
      </Modal>
    </>
  );
};
</>